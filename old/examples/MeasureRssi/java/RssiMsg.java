/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RssiMsg'
 * message type.
 */

public class RssiMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new RssiMsg of size 18. */
    public RssiMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RssiMsg of the given data_length. */
    public RssiMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg with the given data_length
     * and base offset.
     */
    public RssiMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg using the given byte array
     * as backing store.
     */
    public RssiMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RssiMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RssiMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg embedded in the given message
     * at the given base offset.
     */
    public RssiMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RssiMsg embedded in the given message
     * at the given base offset and length.
     */
    public RssiMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RssiMsg> \n";
      try {
        s += "  [appid=0x"+Long.toHexString(get_appid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pcktype=0x"+Long.toHexString(get_pcktype())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [senderid=0x"+Long.toHexString(get_senderid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [receiverid=0x"+Long.toHexString(get_receiverid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [channel=0x"+Long.toHexString(get_channel())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [txpower=0x"+Long.toHexString(get_txpower())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sprayIter=0x"+Long.toHexString(get_sprayIter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [r_rssi=0x"+Long.toHexString(get_r_rssi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [flag=0x"+Long.toHexString(get_flag())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: appid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'appid' is signed (false).
     */
    public static boolean isSigned_appid() {
        return false;
    }

    /**
     * Return whether the field 'appid' is an array (false).
     */
    public static boolean isArray_appid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'appid'
     */
    public static int offset_appid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'appid'
     */
    public static int offsetBits_appid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'appid'
     */
    public int get_appid() {
        return (int)getUIntBEElement(offsetBits_appid(), 16);
    }

    /**
     * Set the value of the field 'appid'
     */
    public void set_appid(int value) {
        setUIntBEElement(offsetBits_appid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'appid'
     */
    public static int size_appid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'appid'
     */
    public static int sizeBits_appid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pcktype
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pcktype' is signed (false).
     */
    public static boolean isSigned_pcktype() {
        return false;
    }

    /**
     * Return whether the field 'pcktype' is an array (false).
     */
    public static boolean isArray_pcktype() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pcktype'
     */
    public static int offset_pcktype() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pcktype'
     */
    public static int offsetBits_pcktype() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'pcktype'
     */
    public short get_pcktype() {
        return (short)getUIntBEElement(offsetBits_pcktype(), 8);
    }

    /**
     * Set the value of the field 'pcktype'
     */
    public void set_pcktype(short value) {
        setUIntBEElement(offsetBits_pcktype(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'pcktype'
     */
    public static int size_pcktype() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pcktype'
     */
    public static int sizeBits_pcktype() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: senderid
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'senderid' is signed (false).
     */
    public static boolean isSigned_senderid() {
        return false;
    }

    /**
     * Return whether the field 'senderid' is an array (false).
     */
    public static boolean isArray_senderid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'senderid'
     */
    public static int offset_senderid() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'senderid'
     */
    public static int offsetBits_senderid() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'senderid'
     */
    public int get_senderid() {
        return (int)getUIntBEElement(offsetBits_senderid(), 16);
    }

    /**
     * Set the value of the field 'senderid'
     */
    public void set_senderid(int value) {
        setUIntBEElement(offsetBits_senderid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'senderid'
     */
    public static int size_senderid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'senderid'
     */
    public static int sizeBits_senderid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: receiverid
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'receiverid' is signed (false).
     */
    public static boolean isSigned_receiverid() {
        return false;
    }

    /**
     * Return whether the field 'receiverid' is an array (false).
     */
    public static boolean isArray_receiverid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'receiverid'
     */
    public static int offset_receiverid() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'receiverid'
     */
    public static int offsetBits_receiverid() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'receiverid'
     */
    public int get_receiverid() {
        return (int)getUIntBEElement(offsetBits_receiverid(), 16);
    }

    /**
     * Set the value of the field 'receiverid'
     */
    public void set_receiverid(int value) {
        setUIntBEElement(offsetBits_receiverid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'receiverid'
     */
    public static int size_receiverid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'receiverid'
     */
    public static int sizeBits_receiverid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: channel
    //   Field type: byte, unsigned
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'channel' is signed (false).
     */
    public static boolean isSigned_channel() {
        return false;
    }

    /**
     * Return whether the field 'channel' is an array (false).
     */
    public static boolean isArray_channel() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'channel'
     */
    public static int offset_channel() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'channel'
     */
    public static int offsetBits_channel() {
        return 88;
    }

    /**
     * Return the value (as a byte) of the field 'channel'
     */
    public byte get_channel() {
        return (byte)getSIntBEElement(offsetBits_channel(), 8);
    }

    /**
     * Set the value of the field 'channel'
     */
    public void set_channel(byte value) {
        setSIntBEElement(offsetBits_channel(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'channel'
     */
    public static int size_channel() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'channel'
     */
    public static int sizeBits_channel() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: txpower
    //   Field type: byte, unsigned
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'txpower' is signed (false).
     */
    public static boolean isSigned_txpower() {
        return false;
    }

    /**
     * Return whether the field 'txpower' is an array (false).
     */
    public static boolean isArray_txpower() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'txpower'
     */
    public static int offset_txpower() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'txpower'
     */
    public static int offsetBits_txpower() {
        return 96;
    }

    /**
     * Return the value (as a byte) of the field 'txpower'
     */
    public byte get_txpower() {
        return (byte)getSIntBEElement(offsetBits_txpower(), 8);
    }

    /**
     * Set the value of the field 'txpower'
     */
    public void set_txpower(byte value) {
        setSIntBEElement(offsetBits_txpower(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'txpower'
     */
    public static int size_txpower() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'txpower'
     */
    public static int sizeBits_txpower() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sprayIter
    //   Field type: int, unsigned
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sprayIter' is signed (false).
     */
    public static boolean isSigned_sprayIter() {
        return false;
    }

    /**
     * Return whether the field 'sprayIter' is an array (false).
     */
    public static boolean isArray_sprayIter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sprayIter'
     */
    public static int offset_sprayIter() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sprayIter'
     */
    public static int offsetBits_sprayIter() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'sprayIter'
     */
    public int get_sprayIter() {
        return (int)getUIntBEElement(offsetBits_sprayIter(), 16);
    }

    /**
     * Set the value of the field 'sprayIter'
     */
    public void set_sprayIter(int value) {
        setUIntBEElement(offsetBits_sprayIter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sprayIter'
     */
    public static int size_sprayIter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sprayIter'
     */
    public static int sizeBits_sprayIter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: r_rssi
    //   Field type: short, unsigned
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'r_rssi' is signed (false).
     */
    public static boolean isSigned_r_rssi() {
        return false;
    }

    /**
     * Return whether the field 'r_rssi' is an array (false).
     */
    public static boolean isArray_r_rssi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'r_rssi'
     */
    public static int offset_r_rssi() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'r_rssi'
     */
    public static int offsetBits_r_rssi() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'r_rssi'
     */
    public short get_r_rssi() {
        return (short)getSIntBEElement(offsetBits_r_rssi(), 16);
    }

    /**
     * Set the value of the field 'r_rssi'
     */
    public void set_r_rssi(short value) {
        setSIntBEElement(offsetBits_r_rssi(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'r_rssi'
     */
    public static int size_r_rssi() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'r_rssi'
     */
    public static int sizeBits_r_rssi() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: flag
    //   Field type: short, unsigned
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'flag' is signed (false).
     */
    public static boolean isSigned_flag() {
        return false;
    }

    /**
     * Return whether the field 'flag' is an array (false).
     */
    public static boolean isArray_flag() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'flag'
     */
    public static int offset_flag() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'flag'
     */
    public static int offsetBits_flag() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'flag'
     */
    public short get_flag() {
        return (short)getUIntBEElement(offsetBits_flag(), 8);
    }

    /**
     * Set the value of the field 'flag'
     */
    public void set_flag(short value) {
        setUIntBEElement(offsetBits_flag(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'flag'
     */
    public static int size_flag() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'flag'
     */
    public static int sizeBits_flag() {
        return 8;
    }

}
